------------------------------------------------------
1. insertion sort 
   Read N "long double" data 
   and sort ascending using "insertion sort"
------------------------------------------------------
Test Case:
Input:
Enter value for N: 5
Enter data at index 0: 14    
Enter data at index 1: 12
Enter data at index 0: 8
Enter data at index 0: 11
Enter data at index 0: 13
Output:
Sorted data: 
8 11 12 13 14 
------------------------------------------------------
14 12 8 11 13               12
   --  
...   
14 14 8 11 13 
12 14 8 11 13       12 14 (sorted)      8 11 13 (unsorted)
      --                    8
12 12 14   
8  12 14 11 13      8 12 14 (sorted)    11 13 (unsorted) 
         --                 11
   12 12 14   
8  11 12 14 13      8 11 12 14(sorted)   13 (unsorted)
            --          13
         14 14
8  11 12 13 14      8 11 12 13 14(sorted) {} (unsorted)


    How we insert an element to array?
    The same way we are approaching in the insertion sort.
    Thats why we got the name "insertion sort" 
------------------------------------------------------
#define MAX_SIZE 2000
#include<iostream>
#include<cstdlib>
using namespace std;
void readData(int N, long double* arrayData) {
	cout << "Enter numbers one by one:" << endl;
	for (int I = 0; I < N; I++) {
		cout << "Enter number at index " << I << ":";
		cin >> arrayData[I];
	}
}

void printData(int N, long double* arrayData) {
	for (int I = 0; I < N; I++) {
		cout << arrayData[I] << " ";
	}
	cout << endl;
}
void sortInsertionAsc(int N, long double* arrayData) {
	for (int I = 1; I < N; I++) {
		long double takeOutElement = arrayData[I];
		int position = I;
		//seek the position for takeOutElement from the prevous list before takeOutElement
		for (int J = I - 1; J >= 0; J--) {//Decrement loop for previous list before "takeOutElement"
			if (takeOutElement < arrayData[J]) {
				arrayData[J + 1] = arrayData[J];//Shifting Right
				position = J;
			}
			else {
				break;//Here we cannot find the further position for "takeOutElement" element 
			}
		}
		if (position != I) {
			arrayData[position] = takeOutElement;//Inserting
		}
	}
}
int main() {
	int N;
	cout << "Enter number of numbers:"; cin >> N;

	long double numberArray[MAX_SIZE];
	readData(N, numberArray);

	cout << "(Before Sort)The numbers are:" << endl;
	printData(N, numberArray);

	sortInsertionAsc(N, numberArray);

	cout << "The sorted numbers are:" << endl;
	printData(N, numberArray);

	return EXIT_SUCCESS;
}
------------------------------------------------------




------------------------------------------------------
2. insertion sort 
   Read N "long double" data 
   and sort descending using "insertion sort"
   
*************Lab Assignment*************
------------------------------------------------------
Test Case:
Input:
Enter value for N: 5
Enter data at index 0: 14    
Enter data at index 1: 12
Enter data at index 0: 8
Enter data at index 0: 11
Enter data at index 0: 13
Output:
Sorted data: 
14 13 12 11 8
------------------------------------------------------


------------------------------------------------------
3.
*************Lab Assignment*************
------------------------------------------------------
Question:

For given N words and index of each word 
Based on the index, 
Sort the words and 
print the words in sentence form.

Note: arrangement of words using index is the sentence actually.

Input:
maheswarn trainer developer am I and cum twenty years plus last for
3          5         7       2 1   4  6   10     12    11   9   8
Output:
I am maheswaran and trainer cum developer for last twenty plus years
------------------------------------------------------
Test Case:

Input:
Enter value for N: 14
Enter 14 words and its index:
Enter word at 0:maheswaran
Index of maheswaran: 3
Enter word at 1:trainer 
Index of trainer: 5
Enter word at 2:developer 
Index of developer: 7
Enter word at 3:am 
Index of am: 2
Enter word at 4:I 
Index of I: 1
Enter word at 5:and
Index of and: 4 
Enter word at 6:cum
Index of cum: 6
Enter word at 7:twenty 
Index of twenty: 10
Enter word at 8:years
Index of years: 12
Enter word at 9:plus 
Index of plus: 11
Enter word at 10:last
Index of last: 9
Enter word at 11:for
Index of for: 8

Output:
I am maheswaran and trainer cum developer for last twenty plus years
1 2  3            4  5      6    7        8    9    10     11   12
------------------------------------------------------


------------------------------------------------------
4.
*************Lab Assignment*************
------------------------------------------------------
Read N numbers 
Sort the  numbers based on the frequency of occuracne of the number 

N=10
100 200 100 200 400 300 500 500 500 100
100 occurs 3 times 
200 occurs 2 times 
300 occurs 1 time 
400 occurs 1 time 
500 occurs 3 times 

100 100 100 500 500 500 200 200 400 300

------------------------------------------------------
Test Case:
Input:
Enter value for N: 10
Enter numbers:
100 200 100 200 400 300 500 500 500 100
Output: 
100 100 100 500 500 500 200 200 400 300  
------------------------------------------------------


------------------------------------------------------
c-string in the c-string variable(character array) is 
    sequence of characters terminated by '\0'
    
    
'\0' is null terminated character in the c-string 
------------------------------------------------------
    

------------------------------------------------------
Question 
find length of the string, fibonacii
without strlen function 	
------------------------------------------------------
Test Case:
Input 
fibonacii
Output 
9
------------------------------------------------------
#define MAX_SIZE 2000
#include<iostream>
#include<cstdlib>
using namespace std;

int findStrLen(char* text) {
	int len = 0;
	for (int I = 0; text[I] != '\0' ;I++) {
		len++;
	}
	return len;
}

int main() {
	char text[1000];
	cout << "Enter the string:"; cin >> text;
	int len = findStrLen(text);
	cout << "The length of the " << text << " is " << len << endl;

	return EXIT_SUCCESS;
}
------------------------------------------------------



------------------------------------------------------
Question 
reverse string, fibonacii	
------------------------------------------------------
Test Case:
Input 
fibonacii
Output 
iicanobif
------------------------------------------------------
void doStrReverse(char* text) {
	int len = strlen(text);
	//0   1    2    3    4    5    6    7    8(len-1)    
	//f   i    b    o    n    a    c    c    i
	//L										 R
	//i										 f
	//    L						        R
	//    c                             i
	//		   L                   R
	//		   c                   b
	//              L          R
	//			    a          o
	//					 L			L < R
	//					 R
	int L = 0, R = 0;

	for (L = 0, R=len-1; L < R;  L++, R--) {
		swap(text[L], text[R]);
	}
}
------------------------------------------------------
Full Code
------------------------------------------------------
#define MAX_SIZE 2000
#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;
void swapChar(char& first, char& second) {
	char t = first;
	first = second;
	second = t;
}

void doStrReverse(char* text) {
	int len = strlen(text);
	int L = 0, R = 0;

	for (L = 0, R=len-1; L < R;  L++, R--) {
		swap(text[L], text[R]);
	}
}

int main() {
	char text[1000];
	cout << "Enter the string:"; cin >> text;

	cout << "The given string is " << text << endl;
	doStrReverse(text);
	cout << "The reversed string is " << text << endl;

	return EXIT_SUCCESS;
}
------------------------------------------------------


1. strlen(s)        ->      length of the string 
2. strcpy(s1,s2)    ->      s1 = s2     ; char  by char from s1 to s2 
   strncpy(s1,s2,n)           s1= n chars of s2
3. strcat(s1,s2)    ->      s1 = s1 + s2;  chars of s1 followed by chars of s2 into s1
   strncat(s1,s2,n)         s1 =n chars of s1 + n chars of s2 
4. strcmp(s1,s2)    ->      s1<s2 -ve ; s1>s2  +ve ; s1==s2 zero 
   strncmp(s1,s2,n)         nCharsOfs1 < nCharsOfs2 -ve; nCharsOfs1 > nCharsOfs2 +ve; nCharsOfs1 == nCharsOfs2 zero
5. strchr(s,ch)     ->      returns the pointer of "ch" within "s" by forward traversal 
    Example s="maheswaran" strchr(s,'a') -> "aheswaran"     ie pointer from second char 
   strrchr(s,ch)     ->      returns the pointer of "ch" within "s" by backward traversal 
    Example s="maheswaran" strrchr(s,'a') -> "an"     ie pointer of char from the reverse direction 
6. strstr(s1,s2)    -> similar to "strchr" but for substring instead of char 
                       finds substring "s2" in the mainstring "s1"
                       returns pointer of "s1" in "s2"                         
    Example s="maheswaran" strstr(s,"war") -> "waran"                             
7. strtok           -> Tokenizing           !!!! LATER 
        one for intializaing the token 
        another for reading continuous tokens 
        Example:
        //string of employees details each employee is sepeated by \n 
        //within employee, each attibute is sepeated by comma 
        1001,Mani,300000\n1002,Nithin,400000\n
        we can split using '\n' as the delimer the above sting 
            1001,Mani,300000
            
            1002,Nithin,400000
        we want to split further 
            for example, 1001,Mani,300000
            to split using delimeter ","
------------------------------------------------------    
    
    



------------------------------------------------------
Question 
check a string is palindrome
    malayalam
    madam 
    racecar
    radar
    
Test Case 1:
Input
palindrome 
Output
Not Palindrome String 
Test Case 2:    
Input
malayalam
Output
Palindrome String 

------------------------------------------------------
#define MAX_SIZE 2000
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;
void swapChar(char& first, char& second) {
	char t = first;
	first = second;
	second = t;
}

void doStrReverse(char* text) {
	int len = strlen(text);
	int L = 0, R = 0;

	for (L = 0, R = len - 1; L < R; L++, R--) {
		swap(text[L], text[R]);
	}
}

int main() {
	char text[1000];
	char reversed[1000];
	cout << "Enter the string:"; cin >> text;
	strcpy(reversed, text);
	doStrReverse(reversed);

	cout << "The given string is " << text << endl;
	cout << "The reversed string is " << reversed << endl;
	if (strcmp(text, reversed) == 0) {
		cout << text << " is palindrome." << endl;
	}
	else {
		cout << text << " is not palindrome." << endl;
	}

	return EXIT_SUCCESS;
}
------------------------------------------------------

------------------------------------------------------
Question 
Find number of palindrome strings from given N strings 
    
Test Case 1:
Input
N=5
hello
malayalam
racecar 
model
level
Output:
Number of palindrome strings is 3
------------------------------------------------------
#define STR_SIZE 2000
#define ARR_SIZE 20
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;
void swapChar(char& first, char& second) {
	char t = first;
	first = second;
	second = t;
}

void doStrReverse(char* text) {
	int len = strlen(text);
	int L = 0, R = 0;

	for (L = 0, R = len - 1; L < R; L++, R--) {
		swap(text[L], text[R]);
	}
}

int main() {
	char words[ARR_SIZE][STR_SIZE];
	char reversed[STR_SIZE];

	int N;
	cout << "Enter number of words:"; cin >> N;
	cout << "Enter words one by one:" << endl;
	for (int I = 0; I < N; I++) {
		cin >> words[I];
	}
	
	int count = 0;
	for (int I = 0; I < N; I++) {
		strcpy(reversed, words[I]);
		doStrReverse(reversed);
		if (strcmp(words[I], reversed) == 0) {
			count++;
		}
	}

	cout << "The number of palindrome strings is " << count << endl;
	return EXIT_SUCCESS;
}
------------------------------------------------------

------------------------------------------------------
Map Example:
------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
#include<string>
#include<map>
using namespace std;


int main() {
	
	cout << nameNumber["maheswaran"] << endl;
	nameNumber["maheswaran"] = 1001;
	cout << nameNumber["maheswaran"] << endl;
	nameNumber["uma"] = 1002;

	for (auto e : nameNumber) {
		cout << e.first << " " << e.second << endl;
	}

    return EXIT_SUCCESS;
}    
------------------------------------------------------

------------------------------------------------------
Question 
Count frequency of characters in given string
using STL 
------------------------------------------------------
Test Case:
Input:
hihello 
Output:
h occurs 2 times 
i occurs 1 time
e occurs 1 time
l occurs 2 times 
o occurs 1 time 
------------------------------------------------------
#define STR_SIZE 2000
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<map>
using namespace std;


int main() {
	char text[STR_SIZE];
	cout << "Enter the string:"; cin >> text;
	map<char, int> charFreq;

	for (int I = 0; text[I] != '\0';I++) {
		char ch = text[I];
		charFreq[ch] = charFreq[ch] + 1;
	}

	for (auto e : charFreq) {
		cout << e.first << " occurs " << e.second << " times." << endl;
	}

	return EXIT_SUCCESS;
} 
------------------------------------------------------

